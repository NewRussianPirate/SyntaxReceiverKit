using Microsoft.CodeAnalysis;
using SyntaxReceiverKit;
using System;
using System.Collections.Generic;
using System.Text;

namespace SourceGeneratorExample
{
    [Generator]
    internal class InterfaceImplementGenerator : ISourceGenerator
    {
        private readonly string[] _ifaceNames = new[] { "SomeNamespace.ISomeInterface", "SomeNamespace.ISomeAnotherInterface" };
        private InterfacesImplementReceiver _receiver;

        public void Execute(GeneratorExecutionContext context)
        {
            StringBuilder src = new(40);
            src.Append("//Autogenerated \nusing System;\nnamespace SomeNamespace\n{\n");
            foreach (var i in _receiver.CollectedSymbols)
            {
                if (i.Key.ToDisplayString() == _ifaceNames[0])
                {
                    foreach (var classInfo in i.Value)
                    {
                        src.Append($@"  internal partial class {classInfo.Name}
        {{
            public string GeneratedProperty => ""This is generated property for {i.Key.Name} implementer ({classInfo.Name}). "";
        }}");
                    }
                }
                else
                {
                    foreach (var classInfo in i.Value)
                    {
                        src.Append($@"  internal partial class {classInfo.Name}
        {{
            public string AnotherGeneratedProperty => ""This is __another__ generated property for {i.Key.Name} implementer ({classInfo.Name})"";
        }}");
                    }
                }
            }
            src.Append("\n}\n");
            context.AddSource("InterfaceImpl.g.cs", src.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            _receiver = new(_ifaceNames);
            context.RegisterForSyntaxNotifications(() => _receiver);
        }
    }
}
